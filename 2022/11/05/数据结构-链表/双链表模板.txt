#include<iostream>
using namespace std;
const int N = 100010;

// e[i]表示结点i的值
// l[i]表示结点i的前驱结点(左结点)的下标
// r[i]表示结点i的后继结点(右结点)的下标
// idx 指向下一个待用的结点
int e[N], l[N], r[N], idx;

// 初始化
void init()
{
    // 这里偷个懒，用0表示左边界结点(head)，用1表示右边界结点(tail)
    r[0] = 1; // 初始化时，0结点的右结点为1结点
    l[1] = 0; // 初始化时，1结点的左结点为0结点
    idx = 2; // 下标为0和1的结点均已使用，所以idx从2开始
}

// 将新结点插到下标为k的结点的右边
void add(int k, int x)
{
    e[idx] = x; // 为新结点赋值
    r[idx] = r[k]; // 原k结点的右结点成为新结点的右结点
    l[idx] = k; // k结点成为新结点的左结点
    
    l[r[k]] = idx; // 新结点成为原k结点的右结点的左结点
    r[k] = idx ++ ; // 新结点成为k结点的右结点
}

// 将新结点插到下标为k的结点的左边，相当于将新结点插到k结点的左结点的右边
// 即 add(l[k], x);
// 因此双链表的插入操作只需实现一个即可

// 删除下标为k的结点
void remove()
{
    r[l[k]] = r[k]; // k结点的右结点成为k结点左结点的右结点
    l[r[k]] = l[k]; // k结点的左结点成为k结点右结点的左结点
}